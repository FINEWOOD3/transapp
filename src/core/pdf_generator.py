import os
import sqlite3
from pathlib import Path
from typing import Dict, List, Optional
import tempfile
import hashlib
from dataclasses import dataclass
import json
import subprocess
from jinja2 import Environment, FileSystemLoader

# LaTeX模板路径
TEMPLATE_DIR = Path(__file__).parent / "templates"
TEX_COMPILER = "xelatex"  # 支持中文的编译器

@dataclass
class LatexElement:
    content: str
    element_type: str  # 'text'/'figure'/'table'/'formula'
    page_num: int
    bbox: Optional[tuple[float, float, float, float]] = None

class PDFGenerator:
    def __init__(self, db_path: str = "data/pdf_elements.db"):
        self.db_path = Path(db_path)
        self.env = Environment(
            loader=FileSystemLoader(TEMPLATE_DIR),
            block_start_string='\BLOCK{',
            block_end_string='}',
            variable_start_string='\VAR{',
            variable_end_string='}',
            comment_start_string='\#{',
            comment_end_string='}',
            line_statement_prefix='%%',
            line_comment_prefix='%#',
            trim_blocks=True,
            autoescape=False
        )
        
        # 注册自定义过滤器
        self.env.filters['escape_latex'] = self._escape_latex
        
        # 确保模板目录存在
        TEMPLATE_DIR.mkdir(exist_ok=True)
        self._init_templates()

    def _init_templates(self):
        """初始化默认LaTeX模板"""
        default_template = r"""
\documentclass[12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage{xeCJK}  % 中文字体支持
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{geometry}
\usepackage{float}
\usepackage{booktabs}

\geometry{a4paper, margin=1in}

\title{\VAR{title}}
\author{Generated by Translation App}
\date{\today}

\begin{document}
\maketitle

\BLOCK{for page in pages}
%% Page \VAR{page.number}
\BLOCK{for element in page.elements}
\BLOCK{if element.type == 'text'}
\VAR{element.content | escape_latex}

\BLOCK{elif element.type == 'figure'}
\begin{figure}[H]
    \centering
    \includegraphics[width=\textwidth]{\VAR{element.image_path}}
    \caption{\VAR{element.caption | escape_latex}}
\end{figure}

\BLOCK{elif element.type == 'table'}
\begin{table}[H]
    \centering
    \caption{\VAR{element.caption | escape_latex}}
    \VAR{element.content | escape_latex}
\end{table}

\BLOCK{elif element.type == 'formula'}
\begin{equation}
\VAR{element.content | escape_latex}
\end{equation}
\BLOCK{endif}
\BLOCK{endfor}
\BLOCK{endfor}

\end{document}
"""
        template_path = TEMPLATE_DIR / "default.tex.jinja"
        if not template_path.exists():
            with open(template_path, 'w', encoding='utf-8') as f:
                f.write(default_template)

    def _escape_latex(self, text: str) -> str:
        """转义LaTeX特殊字符"""
        escapes = {
            '&': r'\&',
            '%': r'\%',
            '$': r'\$',
            '#': r'\#',
            '_': r'\_',
            '{': r'\{',
            '}': r'\}',
            '~': r'\textasciitilde{}',
            '^': r'\^{}',
            '\\': r'\textbackslash{}',
            '<': r'\textless{}',
            '>': r'\textgreater{}',
        }
        return ''.join(escapes.get(c, c) for c in text)

    def _get_elements_from_db(self, file_path: str) -> List[LatexElement]:
        """从数据库获取元素并转换为LaTeX元素"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        file_id = hashlib.md5(str(Path(file_path).absolute()).encode()).hexdigest()
        cursor.execute("""
            SELECT element_type, content, binary_data, page_num, bbox
            FROM elements
            WHERE file_id = ?
            ORDER BY page_num, element_index
        """, (file_id,))
        
        elements = []
        for row in cursor.fetchall():
            bbox = tuple(map(float, row[4].split(','))) if row[4] else None
            elements.append(LatexElement(
                content=row[1] or "",
                element_type=row[0],
                page_num=row[3],
                bbox=bbox
            ))
        
        conn.close()
        return elements

    def _save_images(self, elements: List[LatexElement], output_dir: Path) -> List[LatexElement]:
        """保存图像到临时目录并更新元素引用"""
        image_dir = output_dir / "images"
        image_dir.mkdir(exist_ok=True)
        
        for element in elements:
            if element.element_type == 'figure' and element.binary_data:
                try:
                    import base64
                    from PIL import Image
                    import io
                    
                    image_data = base64.b64decode(element.binary_data)
                    img = Image.open(io.BytesIO(image_data))
                    
                    # 根据原始bbox计算相对宽度
                    width_ratio = 1.0
                    if element.bbox:
                        width_ratio = min(1.0, (element.bbox[2] - element.bbox[0]) / 500)
                    
                    # 保存图像
                    img_path = image_dir / f"fig_{element.page_num}_{hashlib.md5(element.content.encode()).hexdigest()[:8]}.png"
                    img.save(img_path)
                    
                    # 更新元素内容为图像路径
                    element.content = str(img_path.relative_to(output_dir))
                except Exception as e:
                    print(f"Failed to process image: {e}")
                    element.content = "[Image processing failed]"
        
        return elements

    def generate_pdf(
        self,
        file_path: str,
        output_path: str,
        title: str = "Translated Document",
        keep_tex: bool = False
    ) -> bool:
        """
        生成PDF文件
        :param file_path: 原始PDF路径
        :param output_path: 输出PDF路径
        :param title: 文档标题
        :param keep_tex: 是否保留中间.tex文件
        :return: 是否成功
        """
        output_path = Path(output_path)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # 创建临时工作目录
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_dir = Path(temp_dir)
            
            # 获取元素并处理图像
            elements = self._get_elements_from_db(file_path)
            elements = self._save_images(elements, temp_dir)
            
            # 按页码分组
            pages = {}
            for elem in elements:
                if elem.page_num not in pages:
                    pages[elem.page_num] = []
                pages[elem.page_num].append(elem)
            
            # 准备模板上下文
            context = {
                "title": title,
                "pages": [{
                    "number": page_num,
                    "elements": [{
                        "type": elem.element_type,
                        "content": elem.content,
                        "image_path": elem.content if elem.element_type == 'figure' else None,
                        "caption": elem.content if elem.element_type in ('figure', 'table') else None
                    } for elem in elems]
                } for page_num, elems in sorted(pages.items())]
            }
            
            # 渲染LaTeX模板
            template = self.env.get_template("default.tex.jinja")
            tex_content = template.render(context)
            
            # 保存.tex文件
            tex_path = temp_dir / "document.tex"
            with open(tex_path, 'w', encoding='utf-8') as f:
                f.write(tex_content)
            
            # 编译LaTeX
            try:
                subprocess.run(
                    [TEX_COMPILER, "-interaction=nonstopmode", "-output-directory", str(temp_dir), str(tex_path)],
                    check=True,
                    cwd=temp_dir
                )
                
                # 复制生成的PDF到输出路径
                generated_pdf = temp_dir / "document.pdf"
                if generated_pdf.exists():
                    generated_pdf.rename(output_path)
                    
                    # 可选保留.tex文件
                    if keep_tex:
                        tex_output = output_path.with_suffix('.tex')
                        tex_path.rename(tex_output)
                    
                    return True
                
            except subprocess.CalledProcessError as e:
                print(f"LaTeX compilation failed: {e}")
                # 保存错误日志
                log_path = output_path.with_suffix('.log')
                if (temp_dir / "document.log").exists():
                    (temp_dir / "document.log").rename(log_path)
            
            return False